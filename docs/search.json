[
  {
    "objectID": "hello.html",
    "href": "hello.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "introduction\nFor a demonstration of a line plot on a polar axis, see\n\n1+1 \n\n[1] 2\n\na = c(1,2,3,4)\n\n\n#import numpy as np\nimport pandas as pd\n#import matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom statsmodels.discrete.discrete_model import Probit\n\ndf = pd.read_csv(\"data/Mroz.csv\")\n\nprint(df.head())\n\n   Unnamed: 0  lfp  k5  k618  age   wc  hc       lwg        inc\n0           1  yes   1     0   32   no  no  1.210165  10.910001\n1           2  yes   0     2   30   no  no  0.328504  19.500000\n2           3  yes   1     3   35   no  no  1.514128  12.039999\n3           4  yes   0     3   34   no  no  0.092115   6.800000\n4           5  yes   1     2   31  yes  no  1.524280  20.100000\n\nprint(df.info())\n# data cleaning\n# transformacja zmiennych \n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 753 entries, 0 to 752\nData columns (total 9 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   Unnamed: 0  753 non-null    int64  \n 1   lfp         753 non-null    object \n 2   k5          753 non-null    int64  \n 3   k618        753 non-null    int64  \n 4   age         753 non-null    int64  \n 5   wc          753 non-null    object \n 6   hc          753 non-null    object \n 7   lwg         753 non-null    float64\n 8   inc         753 non-null    float64\ndtypes: float64(2), int64(4), object(3)\nmemory usage: 53.1+ KB\nNone\n\ndf = df.drop(df.columns[0], axis = 1)\ndf[\"lfp\"] = df[\"lfp\"] == \"yes\"\ndf[\"wc\"] = df[\"wc\"] == \"yes\"\ndf[\"hc\"] = df[\"hc\"] == \"yes\"\n\nprint(df.info())\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 753 entries, 0 to 752\nData columns (total 8 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   lfp     753 non-null    bool   \n 1   k5      753 non-null    int64  \n 2   k618    753 non-null    int64  \n 3   age     753 non-null    int64  \n 4   wc      753 non-null    bool   \n 5   hc      753 non-null    bool   \n 6   lwg     753 non-null    float64\n 7   inc     753 non-null    float64\ndtypes: bool(3), float64(2), int64(3)\nmemory usage: 31.7 KB\nNone\n\nprint(df.head())\n\n# summary statistics\n\n    lfp  k5  k618  age     wc     hc       lwg        inc\n0  True   1     0   32  False  False  1.210165  10.910001\n1  True   0     2   30  False  False  0.328504  19.500000\n2  True   1     3   35  False  False  1.514128  12.039999\n3  True   0     3   34  False  False  0.092115   6.800000\n4  True   1     2   31   True  False  1.524280  20.100000\n\nprint(df.describe())\n\n# probit regression fit \n\n               k5        k618         age         lwg         inc\ncount  753.000000  753.000000  753.000000  753.000000  753.000000\nmean     0.237716    1.353254   42.537849    1.097115   20.128965\nstd      0.523959    1.319874    8.072574    0.587556   11.634799\nmin      0.000000    0.000000   30.000000   -2.054124   -0.029000\n25%      0.000000    0.000000   36.000000    0.818087   13.025000\n50%      0.000000    1.000000   43.000000    1.068403   17.700001\n75%      0.000000    2.000000   49.000000    1.399717   24.466000\nmax      3.000000    8.000000   60.000000    3.218876   96.000000\n\ny = df[\"lfp\"]\nX = df.drop([\"lfp\"], 1)\n\n<string>:1: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n\nX = sm.add_constant(X)\nmodel = Probit(y, X.astype(float))\nprobit_model = model.fit()\n\nOptimization terminated successfully.\n         Current function value: 0.601189\n         Iterations 5\n\nprint(probit_model.summary())\n\n                          Probit Regression Results                           \n==============================================================================\nDep. Variable:                    lfp   No. Observations:                  753\nModel:                         Probit   Df Residuals:                      745\nMethod:                           MLE   Df Model:                            7\nDate:                czw, 26 sty 2023   Pseudo R-squ.:                  0.1208\nTime:                        22:48:58   Log-Likelihood:                -452.69\nconverged:                       True   LL-Null:                       -514.87\nCovariance Type:            nonrobust   LLR p-value:                 9.471e-24\n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst          1.9184      0.381      5.040      0.000       1.172       2.664\nk5            -0.8747      0.114     -7.703      0.000      -1.097      -0.652\nk618          -0.0386      0.040     -0.953      0.340      -0.118       0.041\nage           -0.0378      0.008     -4.971      0.000      -0.053      -0.023\nwc             0.4883      0.135      3.604      0.000       0.223       0.754\nhc             0.0572      0.124      0.461      0.645      -0.186       0.300\nlwg            0.3656      0.088      4.165      0.000       0.194       0.538\ninc           -0.0205      0.005     -4.297      0.000      -0.030      -0.011\n==============================================================================\n\nprint(pd.crosstab(df[\"lfp\"], df[\"hc\"], margins = True))\n\nhc     False  True  All\nlfp                    \nFalse    207   118  325\nTrue     251   177  428\nAll      458   295  753\n\n\n\nprintln(\"test\")\n\ntest"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "introduction\nFor a demonstration of a line plot on a polar axis, see\n\n1+1 \n\n[1] 2\n\na = c(1,2,3,4)\n\n\n#import numpy as np\nimport pandas as pd\n#import matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom statsmodels.discrete.discrete_model import Probit\n\ndf = pd.read_csv(\"data/Mroz.csv\")\n\nprint(df.head())\n\n   Unnamed: 0  lfp  k5  k618  age   wc  hc       lwg        inc\n0           1  yes   1     0   32   no  no  1.210165  10.910001\n1           2  yes   0     2   30   no  no  0.328504  19.500000\n2           3  yes   1     3   35   no  no  1.514128  12.039999\n3           4  yes   0     3   34   no  no  0.092115   6.800000\n4           5  yes   1     2   31  yes  no  1.524280  20.100000\n\nprint(df.info())\n# data cleaning\n# transformacja zmiennych \n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 753 entries, 0 to 752\nData columns (total 9 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   Unnamed: 0  753 non-null    int64  \n 1   lfp         753 non-null    object \n 2   k5          753 non-null    int64  \n 3   k618        753 non-null    int64  \n 4   age         753 non-null    int64  \n 5   wc          753 non-null    object \n 6   hc          753 non-null    object \n 7   lwg         753 non-null    float64\n 8   inc         753 non-null    float64\ndtypes: float64(2), int64(4), object(3)\nmemory usage: 53.1+ KB\nNone\n\ndf = df.drop(df.columns[0], axis = 1)\ndf[\"lfp\"] = df[\"lfp\"] == \"yes\"\ndf[\"wc\"] = df[\"wc\"] == \"yes\"\ndf[\"hc\"] = df[\"hc\"] == \"yes\"\n\nprint(df.info())\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 753 entries, 0 to 752\nData columns (total 8 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   lfp     753 non-null    bool   \n 1   k5      753 non-null    int64  \n 2   k618    753 non-null    int64  \n 3   age     753 non-null    int64  \n 4   wc      753 non-null    bool   \n 5   hc      753 non-null    bool   \n 6   lwg     753 non-null    float64\n 7   inc     753 non-null    float64\ndtypes: bool(3), float64(2), int64(3)\nmemory usage: 31.7 KB\nNone\n\nprint(df.head())\n\n# summary statistics\n\n    lfp  k5  k618  age     wc     hc       lwg        inc\n0  True   1     0   32  False  False  1.210165  10.910001\n1  True   0     2   30  False  False  0.328504  19.500000\n2  True   1     3   35  False  False  1.514128  12.039999\n3  True   0     3   34  False  False  0.092115   6.800000\n4  True   1     2   31   True  False  1.524280  20.100000\n\nprint(df.describe())\n\n# probit regression fit \n\n               k5        k618         age         lwg         inc\ncount  753.000000  753.000000  753.000000  753.000000  753.000000\nmean     0.237716    1.353254   42.537849    1.097115   20.128965\nstd      0.523959    1.319874    8.072574    0.587556   11.634799\nmin      0.000000    0.000000   30.000000   -2.054124   -0.029000\n25%      0.000000    0.000000   36.000000    0.818087   13.025000\n50%      0.000000    1.000000   43.000000    1.068403   17.700001\n75%      0.000000    2.000000   49.000000    1.399717   24.466000\nmax      3.000000    8.000000   60.000000    3.218876   96.000000\n\ny = df[\"lfp\"]\nX = df.drop(\"lfp\", axis=1)\nX = sm.add_constant(X)\nmodel = Probit(y, X.astype(float))\nprobit_model = model.fit()\n\nOptimization terminated successfully.\n         Current function value: 0.601189\n         Iterations 5\n\nprint(probit_model.summary())\n\n                          Probit Regression Results                           \n==============================================================================\nDep. Variable:                    lfp   No. Observations:                  753\nModel:                         Probit   Df Residuals:                      745\nMethod:                           MLE   Df Model:                            7\nDate:                czw, 26 sty 2023   Pseudo R-squ.:                  0.1208\nTime:                        23:26:25   Log-Likelihood:                -452.69\nconverged:                       True   LL-Null:                       -514.87\nCovariance Type:            nonrobust   LLR p-value:                 9.471e-24\n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst          1.9184      0.381      5.040      0.000       1.172       2.664\nk5            -0.8747      0.114     -7.703      0.000      -1.097      -0.652\nk618          -0.0386      0.040     -0.953      0.340      -0.118       0.041\nage           -0.0378      0.008     -4.971      0.000      -0.053      -0.023\nwc             0.4883      0.135      3.604      0.000       0.223       0.754\nhc             0.0572      0.124      0.461      0.645      -0.186       0.300\nlwg            0.3656      0.088      4.165      0.000       0.194       0.538\ninc           -0.0205      0.005     -4.297      0.000      -0.030      -0.011\n==============================================================================\n\nprint(pd.crosstab(df[\"lfp\"], df[\"hc\"], margins = True))\n\nhc     False  True  All\nlfp                    \nFalse    207   118  325\nTrue     251   177  428\nAll      458   295  753\n\n\n\nprintln(\"test\")\n\ntest"
  }
]